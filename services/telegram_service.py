import requests
import os
from datetime import datetime, timedelta
from models.task import Task
from services.task_service import TaskService
import threading
import time

class TelegramService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        self.bot_token = None
        self.chat_id = None
        self.base_url = None
        self._settings_loaded = False
        
        # –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–¥–µ—Å—å - —ç—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ –º–µ—Ç–æ–¥–æ–≤
    
    def _load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if self._settings_loaded:
            return
            
        try:
            from models.settings import SystemSettings
            
            self.bot_token = SystemSettings.get_setting('telegram_bot_token')
            self.chat_id = SystemSettings.get_setting('telegram_chat_id')
            
            if self.bot_token:
                self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
            
            self._settings_loaded = True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram: {e}")
            # Fallback –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
            self.bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
            self.chat_id = os.environ.get('TELEGRAM_CHAT_ID')
            if self.bot_token:
                self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
            self._settings_loaded = True
    
    def reload_settings(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self._settings_loaded = False
        self._load_settings()
    
    def send_message(self, message, parse_mode='HTML'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
        if not self._settings_loaded:
            self._load_settings()
            
        if not self.bot_token or not self.chat_id:
            print(f"Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
            return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        
        try:
            url = f"{self.base_url}/sendMessage"
            data = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': parse_mode
            }
            
            response = requests.post(url, data=data, timeout=10)
            if response.status_code == 200:
                print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: HTTP {response.status_code}")
                return False
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False
    
    def send_private_message(self, telegram_username, message, parse_mode='HTML'):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ Telegram username"""
        if not self._settings_loaded:
            self._load_settings()
            
        if not self.bot_token:
            print(f"Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_username}")
            return False
            
        if not telegram_username:
            print(f"Telegram username –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return False
        
        try:
            # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
            username = telegram_username.lstrip('@')
            url = f"{self.base_url}/sendMessage"
            data = {
                'chat_id': f"@{username}",
                'text': message,
                'parse_mode': parse_mode
            }
            
            response = requests.post(url, data=data, timeout=10)
            if response.status_code == 200:
                print(f"–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_username} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_username}: HTTP {response.status_code}")
                return False
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_username}: {e}")
            return False
    
    def send_new_task_notification(self, task):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
        message = f"""
üö® <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>

üìã <b>–ó–∞–¥–∞—á–∞:</b> {task.task_number}
üè∑ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task.title}
üìù <b>–¢–∏–ø:</b> {task.task_type}
‚ö° <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {task.priority}
üë§ <b>–û—Ç:</b> {task.requester_name} ({task.requester_department})
‚è∞ <b>–°–æ–∑–¥–∞–Ω–æ:</b> {task.created_at.strftime('%d.%m.%Y %H:%M')}
        """.strip()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —á–∞—Ç
        self.send_message(message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è IT —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
        self._notify_it_staff_new_task(task)
    
    def send_status_change_notification(self, task):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
        status_emoji = {
            '–í —Ä–∞–±–æ—Ç–µ': 'üîÑ',
            '–í –æ—á–µ—Ä–µ–¥–∏': '‚è≥',
            '–û–∂–∏–¥–∞–µ—Ç': '‚è∏',
            '–ì–æ—Ç–æ–≤–æ': '‚úÖ',
            '–û—Ç–º–µ–Ω–µ–Ω–æ': '‚ùå'
        }
        
        emoji = status_emoji.get(task.status, 'üìä')
        
        message = f"""
{emoji} <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏</b>

üìã <b>–ó–∞–¥–∞—á–∞:</b> {task.task_number}
üè∑ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task.title}
üîÑ <b>–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</b> {task.status}
üë§ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {task.assigned_to.name if task.assigned_to else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}
‚è∞ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {task.updated_at.strftime('%d.%m.%Y %H:%M')}
        """.strip()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —á–∞—Ç
        self.send_message(message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∏—Ç–µ–ª—é
        if task.requester_email:
            self._notify_requester_status_change(task)
    
    def _notify_it_staff_new_task(self, task):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ IT —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ"""
        try:
            from models.user import User
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö IT —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            it_staff = User.query.filter_by(role='it_staff', is_active=True).all()
            
            for user in it_staff:
                if user.telegram_username:
                    message = f"""
üîî <b>–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è IT –æ—Ç–¥–µ–ª–∞!</b>

üìã <b>–ó–∞–¥–∞—á–∞:</b> {task.task_number}
üè∑ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task.title}
üìù <b>–¢–∏–ø:</b> {task.task_type}
‚ö° <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {task.priority}
üë§ <b>–û—Ç:</b> {task.requester_name} ({task.requester_department})
‚è∞ <b>–°–æ–∑–¥–∞–Ω–æ:</b> {task.created_at.strftime('%d.%m.%Y %H:%M')}

üíª –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç—É.
                    """.strip()
                    
                    self.send_private_message(user.telegram_username, message)
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ IT —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {e}")
    
    def _notify_requester_status_change(self, task):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∏—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
        try:
            from models.user import User
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
            user = User.query.filter_by(email=task.requester_email, is_active=True).first()
            
            if user and user.telegram_username:
                status_emoji = {
                    '–í —Ä–∞–±–æ—Ç–µ': 'üîÑ',
                    '–í –æ—á–µ—Ä–µ–¥–∏': '‚è≥',
                    '–û–∂–∏–¥–∞–µ—Ç': '‚è∏',
                    '–ì–æ—Ç–æ–≤–æ': '‚úÖ',
                    '–û—Ç–º–µ–Ω–µ–Ω–æ': '‚ùå'
                }
                
                emoji = status_emoji.get(task.status, 'üìä')
                
                message = f"""
{emoji} <b>–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω</b>

üìã <b>–ó–∞–¥–∞—á–∞:</b> {task.task_number}
üè∑ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task.title}
üîÑ <b>–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</b> {task.status}
üë§ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {task.assigned_to.name if task.assigned_to else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}
‚è∞ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {task.updated_at.strftime('%d.%m.%Y %H:%M')}

üîó –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –≤ —Å–∏—Å—Ç–µ–º–µ: {self._get_system_url()}
                """.strip()
                
                self.send_private_message(user.telegram_username, message)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∏—Ç–µ–ª—è: {e}")
    
    def _get_system_url(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Å—Å—ã–ª–æ–∫ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        return "http://localhost:5000"  # –ó–∞–≥–ª—É—à–∫–∞
    
    def send_overdue_reminder(self, overdue_tasks):
        """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö"""
        if not overdue_tasks:
            return
        
        message = f"""
‚ö†Ô∏è <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏!</b>

–ù–∞–π–¥–µ–Ω–æ <b>{len(overdue_tasks)}</b> –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:

"""
        
        for task in overdue_tasks[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
            overdue_days = (datetime.utcnow() - task.deadline).days
            message += f"‚Ä¢ {task.task_number}: {task.title} (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {overdue_days} –¥–Ω.)\n"
        
        if len(overdue_tasks) > 5:
            message += f"\n... –∏ –µ—â–µ {len(overdue_tasks) - 5} –∑–∞–¥–∞—á"
        
        self.send_message(message)
    
    def send_unassigned_reminder(self, unassigned_tasks):
        """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö"""
        if not unassigned_tasks:
            return
        
        message = f"""
üìã <b>–ù–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏</b>

–ù–∞–π–¥–µ–Ω–æ <b>{len(unassigned_tasks)}</b> –Ω–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:

"""
        
        for task in unassigned_tasks[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
            hours_ago = int((datetime.utcnow() - task.created_at).total_seconds() / 3600)
            message += f"‚Ä¢ {task.task_number}: {task.title} ({hours_ago} —á. –Ω–∞–∑–∞–¥)\n"
        
        if len(unassigned_tasks) > 5:
            message += f"\n... –∏ –µ—â–µ {len(unassigned_tasks) - 5} –∑–∞—è–≤–æ–∫"
        
        self.send_message(message)
    
    def _start_background_notifications(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        def background_worker():
            while True:
                try:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
                    time.sleep(2 * 60 * 60)
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                    self._send_periodic_reminders()
                    
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
                    time.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=background_worker, daemon=True)
        thread.start()
    
    def _send_periodic_reminders(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            task_service = TaskService()
            overdue_tasks = task_service.get_overdue_tasks()
            
            if overdue_tasks:
                self.send_overdue_reminder(overdue_tasks)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
            unassigned_tasks = task_service.get_unassigned_tasks()
            
            if unassigned_tasks:
                self.send_unassigned_reminder(unassigned_tasks)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    
    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
        if not self._settings_loaded:
            self._load_settings()
            
        if not self.bot_token:
            return False, "–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", None, None
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
            url = f"{self.base_url}/getMe"
            response = requests.get(url, timeout=10)
            
            if response.status_code != 200:
                return False, f"–û—à–∏–±–∫–∞ API –±–æ—Ç–∞: {response.status_code}", None, None
            
            bot_info = response.json()['result']
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
            if self.chat_id:
                test_url = f"{self.base_url}/sendMessage"
                test_data = {
                    'chat_id': self.chat_id,
                    'text': 'üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ú–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–¥–∞—á\n\n–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!',
                    'parse_mode': 'HTML'
                }
                
                test_response = requests.post(test_url, data=test_data, timeout=10)
                
                if test_response.status_code == 200:
                    chat_info = test_response.json()['result']['chat']
                    return True, f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ë–æ—Ç: {bot_info['username']}", bot_info, chat_info
                else:
                    return False, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç: {test_response.status_code}", bot_info, None
            else:
                return False, "ID —á–∞—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", bot_info, None
                
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}", None, None
